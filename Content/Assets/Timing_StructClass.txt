using System;
using System.Text;
using System.Diagnostics;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace BaseProject
{

    public struct DataStruct
    {   //common 2d game data types
        public Boolean myBoolean; //1 byte
        public byte myByte; //1 byte
        public short myShort; //2 bytes
        public int myInt; //4 bytes
        public float myFloat; //4 bytes
        public Color myColor; //4 bytes
        public Vector2 myVector2; //8 bytes
        public Point myPoint; //8 bytes
    }

    public class DataClass
    {   //common 2d game data types
        public Boolean myBoolean; //1 byte
        public byte myByte; //1 byte
        public short myShort; //2 bytes
        public int myInt; //4 bytes
        public float myFloat; //4 bytes
        public Color myColor; //4 bytes
        public Vector2 myVector2; //8 bytes
        public Point myPoint; //8 bytes
    }



    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        public Stopwatch stopWatch = new Stopwatch();
        public Stopwatch total = new Stopwatch();
        public TimeSpan timespan;
        public long averageTicks;
        public long totalTicks;
        public long frameCount;

        Vector2 position = new Vector2(4, 1);
        float rotation = 0.0f;
        Vector2 origin = new Vector2(0, 0);
        float scale = 1.0f;
        SpriteEffects spriteEffect = SpriteEffects.None;
        float zDepth = 0.1f;
        SpriteFont BitmapFont;
        Color color = Color.White;

        StringBuilder e = new StringBuilder();
        String text;
        int i;


        DataStruct struct1 = new DataStruct();
        DataClass class1 = new DataClass();
        Boolean myBoolean;

        



        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            this.IsMouseVisible = true;
            graphics.PreferredBackBufferWidth = 640;
            graphics.PreferredBackBufferHeight = 360;
        }

        protected override void Initialize()
        {
            base.Initialize();
        }

        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);
            BitmapFont = Content.Load<SpriteFont>("Font_Pixel");
            total.Reset(); total.Start();
            averageTicks = 0;
            totalTicks = 0;
            frameCount = 0;
        }

        protected override void UnloadContent()
        {
        }

        protected override void Update(GameTime gameTime)
        {
            stopWatch.Reset();
            stopWatch.Start();
            base.Update(gameTime);
            //baseline (no forloop) = 5 ticks
            for (i = 0; i < 1000000; i++) //
            {   //over 10,000 frame minimum

                //count = 1m //19,853

                //a simple unnamed scope 
                //{ } //20,866

                //checking a local boolean
                //if (myBoolean) { } //23,310

                //checking a boolean instance in a struct
                //if (struct1.myBoolean){} //24,650

                //checking a boolean instance in a class
                //if (class1.myBoolean){} //25,800
            }
        }
        
        protected override void Draw(GameTime gameTime)
        {
            stopWatch.Stop();
            timespan = stopWatch.Elapsed;
            frameCount++;
            if (frameCount > 10) //discard the first 10 frames
            {
                totalTicks += timespan.Ticks;
                averageTicks = totalTicks / (frameCount - 10);
            }

            //baseline avg 5 from 10,000 frames
            e.Append("ticks this frame: " + timespan.Ticks);
            e.Append("\navg ticks per frame: " + averageTicks);
            e.Append("\ntotal frames: " + frameCount);
            e.Append("\ntotal time: " + total.Elapsed.ToString(@"hh\:mm\:ss"));
            text = e.ToString();
            e.Clear();

            //draw
            GraphicsDevice.Clear(Color.CornflowerBlue);
            spriteBatch.Begin();
            spriteBatch.DrawString(
                BitmapFont,
                text,
                position,
                color,
                rotation,
                origin,
                scale,
                spriteEffect,
                zDepth);
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }
}