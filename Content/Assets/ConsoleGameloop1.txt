using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Threading;
using System.Timers;

namespace ConsoleApplication1
{
    class Program
    {   //single threaded console gameloop design - mrGrak 2019
        public static int actorCount = 256;

        public class Actor
        {
            public float x, y = 0;
            public Boolean active = false;
        }
        public static class Pool //build the lists that model actors
        {
            public static List<Actor> Actors = new List<Actor>();
            static Pool() //setup the pools to handle size amount of actors
            { for (int i = 0; i < actorCount; i++) { Actors.Add(new Actor()); } }
        }

        public static class Simulation
        {
            static int i, a;
            public static int GoalPosition_X = actorCount; //top right of game grid
            public static int GoalPosition_Y = 0; //actors move towards goal pos x,y
            public static int activeActors = actorCount; //setup active counter

            public static void Setup()
            {
                for (i = 0; i < actorCount; i++)
                {   //set active, position actors from 0,0 down-right
                    Pool.Actors[i].active = true;
                    Pool.Actors[i].x = i; //position diagonally right and
                    Pool.Actors[i].y = i; //down, with some space between
                }
                activeActors = actorCount; //set actor counter
            }

            public static void Run()
            {
                Setup(); //ensure sim is ready
                while (activeActors > 1) //one or less actor ends sim
                {
                    for (i = 0; i < actorCount; i++) //main work loop
                    {
                        if (Pool.Actors[i].active) //only process active actors
                        {   //step 1 - move actors towards X and Y goal position
                            if (Pool.Actors[i].x < GoalPosition_X)
                            { Pool.Actors[i].x += 0.5f; }
                            else { Pool.Actors[i].x -= 0.5f; }
                            if (Pool.Actors[i].y < GoalPosition_Y)
                            { Pool.Actors[i].y += 0.5f; }
                            else { Pool.Actors[i].y -= 0.5f; }
                            //step 2 - check collisions, handle active status
                            for (a = 0; a < actorCount; a++) //loop all actors,
                            {   //remove any overlapping active actors from main loop
                                if (Pool.Actors[a].active) //only check overlaps vs actives
                                {
                                    if (i != a) //dont check actor against self
                                    {
                                        if ( //actor must match x, y pos to be overlapping
                                            (Pool.Actors[a].x == Pool.Actors[i].x)
                                            &&
                                            (Pool.Actors[a].y == Pool.Actors[i].y)
                                            )
                                        {   //actor i is removed from main loop
                                            Pool.Actors[i].active = false;
                                            activeActors--;
                                            a = actorCount; //stop actor[i]'s collision checks
                                        }
                                    }
                                }
                            } //actor work complete
                        }
                    }
                    Console.WriteLine("active actors: " + activeActors);
                }
                Console.WriteLine("game simulation complete.");
            }
        }

        static void Main(string[] args)
        {
            Simulation.Run();
            Console.Read();
        }
    }
}